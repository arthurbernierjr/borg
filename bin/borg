#!/usr/bin/env bash
if [[ $1 == 'debug' ]]; then
  shift
  rm -f libpeerconnection.log
  # kill any other process listening on the debug ports
  for port in $(echo 8080 5858); do
    lsof -i tcp:${port} | grep LISTEN | awk '{print $2}' | xargs kill >/dev/null 2>&1
  done
  # node-inspector and coffee should start before google-chrome is finished loading
  google-chrome http://127.0.0.1:8080/debug?port=5858 >/dev/null 2>&1 &
  # NOTICE: capturing the breakpoints you set in code with `debugger` statement is tricky;
  #         the first breakpoint will always be the coffee-script core. the second breakpoint
  #         will appear to also be within coffee-script core, but actually its the first
  #         breakpoint _you_ set, if any. in order to see that you have to 'Step over' once.
  node-inspector & coffee --nodejs --debug-brk $*
else
  # NOTICE: places a temporary bootstrap .cli.coffee file in the cwd.
  #         we do this so that coffee is executed relative to the process.cwd of the project root,
  #         which makes debugging nicer since everything appears to be relative from project root.
  #         we could have done it in pure Bash but relying on node keeps it more OS agnostic.
  TMP=.cli.coffee
  if [ ! -f $TMP ]; then
    DIR=`dirname $0`
    echo "require '${DIR//\\/\/}/../src/cli.coffee'" > $TMP
  fi
  coffee $TMP "$@"
  test -f $TMP && rm $TMP
fi
