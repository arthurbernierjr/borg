// Generated by CoffeeScript 1.4.0
var Logger, Ssh, host, match, nil, node, pass, pkg, user, _i, _len, _ref;

Logger = require('./logger');

Ssh = require('./ssh');

switch (process.argv[2]) {
  case '-V':
  case '--version':
  case 'version':
    pkg = require('../package.json');
    console.log("borg v" + pkg.version + " - by Mike Smullin <mike@smullindesign.com>\n");
    break;
  case '-h':
  case '--help':
  case 'help':
    switch (process.argv[3]) {
      case 'rekey':
        console.log("Usage: borg rekey [options] <user:password@host ...>\n\nOptions:\n\n  -i  identity file path\n");
        break;
      case 'ssh':
        console.log('');
        break;
      case 'deploy':
        console.log('');
        break;
      default:
        console.log("Usage: borg <command> [options] <host ...>\n\nCommands:\n\n  rekey   copy ssh public key to authorized_hosts on remote host(s)\n  ssh     bulk execute command on remote host(s)\n  deploy  execute cookbook on remote host(s)\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output version number\n");
    }
    break;
  case 'rekey':
    _ref = process.argv.slice(3);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (!(match = node.match(/^(.+?)(:(.+))?@(.+)$/))) {
        continue;
      }
      nil = match[0], user = match[1], nil = match[2], pass = match[3], host = match[4];
      new Ssh({
        user: user,
        pass: pass,
        host: host,
        cmd: 'ping -c3 google.com'
      }, function(err) {});
    }
    break;
  case 'ssh':
    console.log(process.argv.slice(3));
    break;
  case 'deploy':
    console.log(process.argv.slice(3));
}
