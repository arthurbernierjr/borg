// Generated by CoffeeScript 1.4.0
var Borg, Logger, Ssh, async, cmd, pkg,
  __slice = [].slice;

Logger = null;

Ssh = null;

async = null;

Borg = (function() {

  function Borg(cmd) {
    var arg, args, flow, last_option, match, node, nodes, options, _fn, _i, _j, _len, _len1, _ref;
    nodes = [];
    options = {};
    args = [];
    last_option = null;
    _ref = process.argv.slice(3);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (match = arg.match(/^(.+?)(:(.+))?@(.+)$/)) {
        nodes.push({
          user: match[1],
          pass: match[3],
          host: match[4]
        });
      } else {
        if (arg[0] === '-') {
          options[last_option = arg.split(/^--?/)[1]] = true;
        } else if (last_option !== null) {
          options[last_option] = arg;
          last_option = null;
        } else {
          args.push(arg);
        }
      }
    }
    console.log({
      cmd: cmd,
      nodes: nodes,
      options: options,
      args: args
    });
    flow = new async;
    _fn = function(node) {
      return flow.parallel(function(next) {
        return Borg[cmd](node, options, next);
      });
    };
    for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
      node = nodes[_j];
      _fn(node);
    }
    flow.go(function() {
      var err, results;
      err = arguments[0], results = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (err) {
        return Logger.out('aborted with error.');
      } else {
        return Logger.out('all done.');
      }
    });
  }

  Borg.rekey = function(node, options, cb) {};

  Borg.assimilate = function(node, options, cb) {};

  Borg.command = function(node, options, cb) {
    return new Ssh({
      user: node.user,
      pass: node.pass,
      host: node.host,
      cmd: options.c
    }, function(err) {
      if (err) {
        Logger.out({
          host: node.host,
          type: 'err'
        }, err);
      }
      return cb(err);
    });
  };

  return Borg;

})();

switch (cmd = process.argv[2]) {
  case '-V':
  case '--version':
  case 'version':
    pkg = require('../package.json');
    console.log("borg v" + pkg.version + "\n");
    break;
  case '-h':
  case '--help':
  case 'help':
    switch (process.argv[3]) {
      case 'rekey':
        console.log("Usage: borg rekey [options] <user:password@host ...>\n\nOptions:\n\n  -i  identity file path\n");
        break;
      case 'assimilate':
        console.log("Usage: borg assimilate [options] <user:password@host ...>\n\nOptions:\n\n  -r, --role  assign each node the following role\n");
        break;
      case 'command':
        console.log("Usage: borg command [options] <user:password@host ...>\n\nOptions:\n\n  --sudo              use `sudo -i`\n  -u=<user>           use `sudo -iu`\n  -c=<shell_command>  command to execute\n");
        break;
      default:
        console.log("Usage: borg <command> [options] <host ...>\n\nCommands:\n\n  rekey       copy ssh public key to authorized_hosts on remote host(s)\n  assimilate  bootstrap and cook remote host(s)\n  command     bulk execute command on remote host(s)\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output version number\n");
    }
    break;
  case 'rekey':
  case 'assimilate':
  case 'command':
    Logger = require('./logger');
    Ssh = require('./ssh');
    async = require('async2');
    Borg(cmd);
}
