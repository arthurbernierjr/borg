// Generated by CoffeeScript 1.4.0
var Logger, Ssh, Ssh2;

Ssh2 = require('ssh2');

Logger = require('./logger');

module.exports = Ssh = (function() {

  function Ssh(o, cb) {
    var _this = this;
    if (!(this.host = o.host)) {
      return cb('host is required');
    }
    if (!(this.pass = o.pass)) {
      return cb('pass is required');
    }
    if (!(this.cmd = o.cmd)) {
      return cb('cmd is required');
    }
    this.user = o.user || 'root';
    this.port = o.port || 22;
    this.ssh = new Ssh2();
    this.ssh.on('connect', function() {
      return Logger.out({
        host: _this.host
      }, 'ssh connected');
    });
    this.ssh.on('ready', function() {
      Logger.out({
        host: _this.host,
        type: 'info'
      }, "execute: " + _this.cmd);
      return _this.ssh.exec(_this.cmd, function(err, stream) {
        if (err) {
          return cb(err);
        }
        stream.on('data', function(data, extended) {
          Logger.out({
            host: _this.host,
            type: (extended === 'stderr' ? 'err' : 'out')
          }, data);
          if (o.stream_data) {
            return o.stream_data.apply(null, arguments);
          }
        });
        stream.on('end', function() {
          if (o.stream_end) {
            return o.stream_end;
          }
        });
        stream.on('close', function() {
          if (o.stream_close) {
            return o.stream_close;
          }
        });
        return stream.on('exit', function(code, signal) {
          Logger.out({
            host: _this.host
          }, "ssh stream exit. code: " + code + ", signal: " + signal);
          if (o.stream_exit) {
            o.stream_exit.apply(null, arguments);
          }
          return _this.ssh.end();
        });
      });
    });
    this.ssh.on('error', function(err) {
      Logger.out({
        host: _this.host
      }, "ssh error: " + err);
      if (o.error) {
        return o.error.apply(null, arguments);
      }
    });
    this.ssh.on('end', function() {
      if (o.end) {
        return o.end;
      }
    });
    this.ssh.on('close', function() {
      Logger.out({
        host: _this.host
      }, "ssh close");
      if (o.close) {
        o.close;
      }
      return cb(null);
    });
    this.ssh.connect({
      host: this.host,
      port: this.port,
      username: this.user,
      password: this.pass
    });
  }

  return Ssh;

})();
